/* Specification
You should use SCSS / SASS to create the CSS that (as accurately as possible) implements the design shown in the target images.
Please view the following video for reference given in the folder.
 //1. //The HTML should not be altered in any way. All of your work should be creating
   the SCSS code required to meet the target design.
 2. SCSS should have a mixin to handle the centering of elements.
 3. SCSS should have a mixin that handles media queries.
 //4. There are three breakpoints:
    - 801px and above: header image url is https://via.placeholder.com/400
    - Between 481px and 800px: header image url is https://via.placeholder.com/300
    - 480px and below: header image url is https://via.placeholder.com/200
 5. Circles in .container.circles should be inline at 621px and above, otherwise they should stack vertically.
 6. Circle radii are 70px, 80px, 90px and 100px.
 7. The row / circle background colours are: #4e89ae #43658b #ed6663 #ffa372.
 8. The header and footer background colour is #8ccff7.
 9. The circle and row hover color is #444.
 10. Footer height is 50px. */




 // storing a color code for bg
 $bg_color: #efeff1;
 // making body have 0 padding and margin and also giving it a bg color by using variable
 body{
   padding: 0;
   margin: 0;
   background-color: $bg_color;
 }

 //  making variables by using the dollar sign and storing the color codes in them
$color1:#4e89ae;
$color2:#43658b;
$color3:#ed6663;
$color4:#ffa372;

$headerAndFooterColor: #8ccff7;
$hoverColor: #444;
$footerHeight: 50px;

//storing the image links inside variable
$header_image_large: url(../images/400.png);
$header_image_medium: url(../images/300.png);
$header_image_small: url(../images/200.png);

@mixin centeringstuff(){
    display: flex;
    justify-content: center;
    align-items:center;
    gap: 10px;
    // width of container is full screen
    width: 100%;
  }
// setting the size of all the circles
@mixin makeround($size : 100px){
    width: $size;
    height: $size;
    border-radius: 100%;
}

// setting the size of all the circles
@mixin squareshape($size) {
    width: $size;
    height: $size;
}
  
// variables for the breakpoints
$largescreen: 800px;
$smallscreen: 480px;
// making a mixin for handling media query
// size is the argument which this mixin will take
@mixin responsive_header($size){
    // using @if to check if the argument is written 'small'
    @if $size == 'small' {
        // if this statement is true the max width of screen will be 480px
        @media (max-width: $smallscreen) {
            // using @content to write the changes of small screen later
            @content;
        }
    }
    
    // using @else if to check if the argument is written 'medium'
    @else if $size == 'medium' {
        @media (min-width: $smallscreen) and (max-width: $largescreen){
            @content;
        }
    }
        
    // using @else if to check if the argument is written 'large'
    @else if $size == 'large' {
        @media (min-width: $largescreen) {
            @content;
        }
    }
}
    
// Selecting the element and calling the mixin for media query handling
#pic {
    @include responsive_header('small') {
        background-image: $header_image_small;
        @include squareshape(200px);
    }
    
    @include responsive_header('medium') {
        background-image: $header_image_medium;
        @include squareshape(300px);
    }
        
    @include responsive_header('large') {
        background-image: $header_image_large;
        @include squareshape(400px);
    }
}

header{
    // this will center everything inside the header which is one image
    @include centeringstuff();
    // fit content will make sure the height doesn't expand more than necessary
    height: fit-content;
    background-color: $headerAndFooterColor;
}
footer{
    height: $footerHeight;
        // the picture class has 100% width and the bg color is same as header
    // so using @extend so i won't have to type them again and using the same width n bgcolor of header
    @extend header;
}

.rectangles div{
    width: 100%;
    height: 30px;
}

.circles{
        margin: 10px;
    @include centeringstuff()
}

#rect1,#c1{
    background-color:$color1;
}
#rect2,#c2{
    background-color:$color2;
}
#rect3,#c3{
    background-color:$color3;
}
#rect4,#c4{
    background-color:$color4;
}
    


    #c1{
        @include makeround(70px);
    }
#c2{
    @include makeround(80px);
}
#c3{
    @include makeround(90px);
}
#c4{
    @include makeround();
}
// HOVERING
// adding the hovering color
#rect1:hover,#rect2:hover,#rect3:hover,#rect4:hover,#c1:hover,#c2:hover,#c3:hover,#c4:hover{
    // changing the background color on hover
    background-color: $hoverColor;
    // adding transition effect to slowly change the color
    transition: 0.1s;
    // thiss will change the cursor from showing an arrow to pointing hand when hovering
    cursor: pointer;
}

// media query for the circle container's flex direction
// if the below is above 620, the circles will be stacked vertically.
@media(width < 620px){
    .circles{
        flex-direction: column;
    }
}



// the media query for header
// @media(width > 800px){
//   #pic{
//     background-image: $header_image_large;
//     width: 400px;
//     height: 400px;
//   }
// }

// @media(800px > width > 480px){
  
//   #pic{
//     background-image: $header_image_medium;
//     width: 300px;
//     height: 300px;
//   }
// }

// @media(width < 480px){
//   #pic{
//     background-image: $header_image_small;
//     width: 200px;
//     height: 200px;
//   }
// }